{"version":3,"sources":["../../../node_modules/bootstrap/scss/mixins/_breakpoints.scss","comp.scss","index.css"],"names":[],"mappings":"AA8GI,mDCzGJ,cAEQ,sBAAA,CAAA,cAAe,CAKtB,CDgDG,0BCvDJ,cAKQ,sBAAA,CAAA,cAAe,CAEtB,CCRD,KACE,QAAS,CACT,mJAC4C,CAC5C,kCAAmC,CACnC,iCAAkC,CAClC,WAAY,CACZ,oRAEuD,CACvD,0GAA+G,CAC/G,2BAA4B,CAC5B,4CAAiD,CACjD,2BAA4B,CAC5B,wBACF,CACA,KACE,yEACF,CACA,0BACE,qBAAsB,CACtB,eACF,CAEA,mCACE,iBAAkB,CAClB,SAAU,CACV,aAAc,CACd,cAAe,CACf,eAAgB,CAChB,oBAAqB,CACrB,iBAAkB,CAClB,mBAAoB,CACpB,UACF,CACA,UACE,4DAIF,CACA,sBAJE,2BAA4B,CAC5B,oCAAqC,CACrC,UASF,CAPA,YACE,qBAAuB,CACvB,kBAAmB,CACnB,yEAIF,CACA,UACE,qBAAuB,CACvB,iBAAkB,CAClB,YAAa,CACb,UACF,CACA,mBAEE,QAAS,CACT,4BACF,CAEA,WACE,WAAY,CACZ,QACF,CACA,UACE,UAAY,CACZ,qBAAuB,CACvB,WAAY,CACZ,8BAA+B,CAC/B,4BAA6B,CAE7B,OAAQ,CACR,QAAS,CACT,iBACF,CACA,cACE,gBAAiB,CACjB,kBACF,CAEA,MACE,UAAY,CACZ,mDAA0E,CAC1E,gBAAiB,CACjB,kBAAmB,CACnB,eACF,CACA,WACE,QACF,CACA,gBACE,gBACF,CACA,YACE,qBAAuB,CACvB,wEAA2E,CAC3E,2BAA4B,CAE5B,SACF,CACA,WACE,cACF","file":"main.266fb7d5.chunk.css","sourcesContent":["// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","@import \"bootstrap/scss/_functions.scss\";\r\n@import \"bootstrap/scss/_variables.scss\";\r\n// @import \"bootstrap/scss/mixins/_breakpoints.scss\";\r\n@import \"bootstrap/scss/_mixins.scss\";\r\n\r\n.card-columns {\r\n    @include media-breakpoint-only(lg) {\r\n        column-count: 4;\r\n    }\r\n    @include media-breakpoint-only(xl) {\r\n        column-count: 4;\r\n    }\r\n}\r\n","/* // @import \"bootstrap/scss/_functions.scss\";\r\n// @import \"bootstrap/scss/_variables.scss\";\r\n// // @import \"bootstrap/scss/mixins/_breakpoints.scss\";\r\n// @import \"bootstrap/scss/_mixins.scss\"; */\r\nbody {\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\r\n    \"Droid Sans\", \"Helvetica Neue\", sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  height: 100%;\r\n  background-image: url(\"/recipe_search/assets/Images/Illustration2.png\"), url(\"/recipe_search/assets/Images/Illustration1.png\"),\r\n    url(\"/recipe_search/assets/Images/Illustration3.png\"), url(\"/recipe_search/assets/Images/Illustration4.png\"),\r\n    url(\"/recipe_search/assets/Images/Illustration5.png\");\r\n  background-position: right top 12px, left bottom 10px, center left 170px, right bottom -5px, right bottom 100px;\r\n  background-repeat: no-repeat;\r\n  background-size: 250px, 250px, 150px, 100px, 30px;\r\n  background-attachment: fixed;\r\n  background-color: lavender;\r\n}\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\r\n}\r\n.has-search .form-control {\r\n  padding-left: 2.375rem;\r\n  margin-top: 40px;\r\n}\r\n\r\n.has-search .form-control-feedback {\r\n  position: absolute;\r\n  z-index: 2;\r\n  display: block;\r\n  width: 2.375rem;\r\n  height: 2.375rem;\r\n  line-height: 2.375rem;\r\n  text-align: center;\r\n  pointer-events: none;\r\n  color: #aaa;\r\n}\r\n.fa-stars {\r\n  background-image: url(\"/recipe_search/assets/Icons/rating.png\");\r\n  background-repeat: no-repeat;\r\n  background-position: left 9px top 9px;\r\n  opacity: 0.7;\r\n}\r\n.fa-search2 {\r\n  background-color: white;\r\n  border-radius: 25px;\r\n  background-image: url(\"/recipe_search/assets/Icons/Icon-feather-search.png\");\r\n  background-repeat: no-repeat;\r\n  background-position: left 9px top 9px;\r\n  opacity: 0.7;\r\n}\r\n.dataCard {\r\n  background-color: black;\r\n  border-radius: 50%;\r\n  height: 100px;\r\n  color: white;\r\n}\r\ninput.form-control {\r\n  /* margin-left: 45px; */\r\n  border: 0;\r\n  background-color: transparent;\r\n}\r\n\r\n.card-body {\r\n  padding: 3px;\r\n  margin: 0;\r\n}\r\n#catagory {\r\n  color: white;\r\n  background-color: black;\r\n  padding: 6px;\r\n  border-bottom-left-radius: 20px;\r\n  border-top-right-radius: 15px;\r\n  /* float: right; */\r\n  right: 0;\r\n  top: -1px;\r\n  position: absolute;\r\n}\r\n.card-img-top {\r\n  max-height: 160px;\r\n  border-radius: 15px;\r\n}\r\n\r\n.card {\r\n  color: white;\r\n  background: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1));\r\n  min-height: 350px;\r\n  border-radius: 15px;\r\n  overflow-y: auto;\r\n}\r\n.card-text {\r\n  bottom: 0;\r\n}\r\n.catagory-title {\r\n  text-align: right;\r\n}\r\n.clock-icon {\r\n  background-color: white;\r\n  background-image: url(\"/recipe_search/assets/Icons/Icon-feather-clock.png\");\r\n  background-repeat: no-repeat;\r\n  /* background-position: left 5px top 9px; */\r\n  opacity: 1;\r\n}\r\n.lng-title{\r\n  font-size:18px;\r\n}\r\n"]}